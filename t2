#!/usr/bin/env python
from __future__ import print_function
from selenium import webdriver
import os,sys,json
import click

def create_driver():
    dcap = dict(webdriver.DesiredCapabilities.PHANTOMJS)
    dcap["phantomjs.page.settings.userAgent"] = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/53 (KHTML, like Gecko) Chrome/15.0.87"
    return webdriver.PhantomJS(desired_capabilities=dcap)

class T2():
    def __init__(self):
        self.driver = create_driver()
        self.driver.implicitly_wait(30)
        self.base_url = "https://t-square.gatech.edu/"
        self.logged_in = False
        self.cache_file = '.t2-cache'


    def close(self):
        self.driver.quit()
    

    def login(self, user=None, password=None):
        if self.logged_in:
            return
        if not user:
            user = open('.username').read().strip()
        if not password:
            password = open('.password').read().strip()
        driver = self.driver
        driver.get(self.base_url + "/portal")
        driver.find_element_by_id("loginLink1").click()
        driver.find_element_by_id("password").clear()
        driver.find_element_by_id("password").send_keys(password)
        driver.find_element_by_id("username").clear()
        driver.find_element_by_id("username").send_keys(user)
        driver.find_element_by_name("submit").click()
        self.logged_in = True


    def list_courses(self):
        driver = self.driver
        driver.get(self.base_url + "/portal")
        courses = [link.get_attribute('title') for link in driver.find_element_by_id("siteLinkList").find_elements_by_css_selector('li > a')]
        f = open(self.cache_file, 'w')
        json.dump(courses, f)
        return courses


    def list_assignments(self, course_name):
        driver = self.driver
        driver.get(self.base_url + "/portal")
        driver.find_element_by_css_selector('a[title="' + course_name + '"] > span').click()
        driver.find_element_by_link_text("Assignments").click()
        driver.switch_to.frame(driver.find_element_by_tag_name("iframe").get_attribute('id'))
        return [a.text for a in driver.find_element_by_tag_name('table').find_elements_by_css_selector('td[headers="title"] > h4 > a')]


    def upload_files_to_assignment(self, course_name, assignment_name, files, remove_old=True):
        driver = self.driver
        driver.get(self.base_url + "/portal")
        driver.find_element_by_css_selector('a[title="' + course_name + '"] > span').click()
        driver.find_element_by_link_text("Assignments").click()
        driver.switch_to.frame(driver.find_element_by_tag_name("iframe").get_attribute('id'))
        driver.find_element_by_link_text(assignment_name).click()

        if remove_old:
            pass

        for f in files:
            driver.find_element_by_name("upload").send_keys(os.path.abspath(f))

        #driver.find_element_by_id("Assignment.view_submission_honor_pledge_yes").click()
        driver.find_element_by_name("post").click()
        driver.save_screenshot('proof.png')

@click.group()
def main():
    pass

@main.command()
@click.option('--username', '-u', help='Username')
@click.password_option()
def login(**kwargs):
    t2 = T2()
    t2.login()
    t2.close()

@main.command()
def list(**kwargs):
    if os.path.exists('.t2-cache'):
        f = open('.t2-cache')
        courses = json.load(f)
    else:
        t2 = T2()
        t2.login()
        courses = t2.list_courses()
        t2.close()
    for c in courses:
        print(c)

@main.command()
@click.argument('course')
def la(**kwargs):
    t2 = T2()
    t2.login()
    assignment_list = t2.list_assignments(kwargs['course'])
    t2.close()
    for assignment in assignment_list:
        print(assignment)

@main.command()
@click.argument('course')
@click.argument('assignment')
@click.argument('to_upload', nargs=-1, required=True, type=click.Path(exists=True))
def upload(**kwargs):
    t2 = T2()
    t2.login()
    t2.upload_files_to_assignment(kwargs['course'], kwargs['assignment'], kwargs['to_upload'])

if __name__ == "__main__":
    main()
